---

- name: Include version-specific variables for Ubuntu.
  ansible.builtin.include_vars: "{{ ansible_distribution }}-{{ ansible_distribution_version }}.yml"
  when: ansible_distribution == 'Ubuntu'
- name: Include version-specific variables for RedHat
  ansible.builtin.include_vars: "RedHat-{{ ansible_distribution_version.split('.')[0] }}.yml"
  when: ansible_os_family == "RedHat"

- name: Install package dependencies
  ansible.builtin.package:
    name: "{{ pystemon_pkg }}"
    state: "present"
  register: pkg_result
  until: pkg_result is success

- name: System pip
  when: pystemon_virtualenv is not defined or not pystemon_virtualenv | string
  block:
    - name: Install pip dependencies
      ansible.builtin.pip:
        name: "{{ pystemon_pip }}"
        state: present
      register: pkg_result
      until: pkg_result is success

- name: Create pystemon user
  ansible.builtin.user:
    name: "{{ pystemon_user }}"
    home: "{{ pystemon_home }}"
    comment: "pystemon app user"
    shell: /bin/bash
    system: yes

- name: Git clone pystemon
  ansible.builtin.git:
    repo: https://github.com/cvandeplas/pystemon.git
    dest: "{{ pystemon_root }}"
    version: "{{ pystemon_version }}"
    update: no
  become: yes
  become_user: "{{ pystemon_user }}"

- name: Virtualenv pip
  when: pystemon_virtualenv is defined and pystemon_virtualenv | string
  block:
    - name: Ensure virtualenv is present
      ansible.builtin.package:
        name: "{{ pystemon_python_pkgs | default(['python-virtualenv', 'python-pip']) }}"
        state: present
      register: pkg_result
      until: pkg_result is success
    - name: Install pip dependencies
      ansible.builtin.pip:
        name: "{{ pystemon_pip }}"
        state: present
        virtualenv: "{{ pystemon_virtualenv }}"
        virtualenv_python: "{{ pystemon_python_bin | default('python3') }}"
      register: pkg_result
      until: pkg_result is success
    - name: Update python path
      ansible.builtin.replace:
        dest: "{{ pystemon_root }}/pystemon.py"
        regexp: "/usr/bin/env python"
        replace: "{{ pystemon_virtualenv }}/bin/python"
        mode: '0755'
        backup: yes

- name: Check if existing config
  ansible.builtin.stat:
    path: /etc/pystemon.yaml
  register: conffile
- name: Create config files from default
  ansible.builtin.copy:
    src: "{{ pystemon_root }}/pystemon.yaml"
    dest: "/etc/pystemon.yaml"
    mode: '0644'
    remote_src: true
    owner: "{{ pystemon_user }}"
  when: not conffile.stat.exists

- name: Configure pystemon in supervisor
  ansible.builtin.template:
    src: supervisor-pystemon.conf.j2
    dest: "{{ supervisor_confdir }}/pystemon.{{ supervisor_ext }}"
    mode: '0644'
  notify:
    - Supervisor update
